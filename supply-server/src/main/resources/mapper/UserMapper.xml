<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC ".//mybatis.org//DTO Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yitai.mapper.UserMapper">
    <insert id="assRole">
        insert into user_role_*(id, user_id, role_id, create_time,
                                                              update_time, create_user, update_user, is_del)
        values
        <foreach collection="list" separator="," item="item">
            (#{item.id},#{item.userId},#{item.roleId},#{item.createTime},
             #{item.updateTime}, #{item.createUser}, #{item.updateUser}, #{item.isDel})
        </foreach>
    </insert>
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into public_user(id, username, openid, realname, password, phone, email, sex,
                               id_number, status, avatar, create_time, update_time, create_user, update_user, is_del)
        values (#{id}, #{username},#{openid}, #{realname}, #{password}, #{phone}, #{email}, #{sex},
                #{idNumber}, #{status}, #{avatar}, #{createTime}, #{updateTime}, #{createUser},
                #{updateUser}, #{isDel})

    </insert>
    <insert id="insertUserTenant">
        insert into public_user_tenant(id, user_id, tenant_id, create_time, update_time, create_user, update_user, is_del)
        values (#{id}, #{userId}, #{tenantId}, #{createTime}, #{updateTime}, #{createUser},
                #{updateUser}, #{isDel})
    </insert>
    <insert id="insertUserDept">
        insert into user_department_*(id, user_id, dept_id, create_user, update_user, create_time, update_time, is_del)
        VALUES
        <foreach collection="list" separator="," item="item">
            (#{item.id}, #{item.userId},#{item.deptId},#{item.createTime},
            #{item.updateTime}, #{item.createUser}, #{item.updateUser}, #{item.isDel})
        </foreach>
    </insert>
    <insert id="insertUserRole">
        insert into user_role_*(id, user_id, role_id, create_user, update_user, create_time, update_time, is_del)
        VALUES
            <foreach collection="list" separator="," item="item">
                (#{item.id}, #{item.userId},#{item.roleId},#{item.createTime},
                #{item.updateTime}, #{item.createUser}, #{item.updateUser}, #{item.isDel})
            </foreach>
    </insert>

    <update id="update" parameterType="com.yitai.admin.entity.User">
        update public_user
        <set>
            <if test="username != null">username = #{username},</if>
            <if test="realname != null">realname = #{realname},</if>
            <if test="password != null">password = #{password},</if>
            <if test="phone != null">phone = #{phone},</if>
            <if test="email != null">email = #{email},</if>
            <if test="sex != null">sex = #{sex},</if>
            <if test="idNumber != null">id_number = #{idNumber},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="updateUser != null">update_user = #{updateUser},</if>
            <if test="status != null">status = #{status}</if>
        </set>
        where id = #{id}
    </update>
    <resultMap id="pageQueryResultMap" type="com.yitai.admin.vo.UserVO">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="realname" column="realname"/>
        <result property="sex" column="sex"/>
        <result property="openid" column="openid"/>
        <result property="phone" column="phone"/>
        <result property="email" column="email"/>
        <result property="idNumber" column="id_number"/>
        <result property="status" column="status"/>
        <result property="avatar" column="avatar"/>
        <result property="departments" column="departments" typeHandler="com.yitai.handler.StringToListTypeHandler" />
        <result property="roles" column="roles" typeHandler="com.yitai.handler.StringToListTypeHandler" />
    </resultMap>
    <select id="pageQuery" resultMap="pageQueryResultMap">
        select pu.id, pu.username, pu.realname, pu.sex, pu.openid, pu.phone, pu.email,
               pu.id_number, pu.status, avatar,
               GROUP_CONCAT(distinct d.department_name order by ud.dept_id) as departments,
               GROUP_CONCAT(distinct r.role_name order by r.id) as roles
        from public_user pu
        left join public_user_tenant put on pu.id = put.user_id
        left join user_department_* ud on pu.id = ud.user_id
        left join department_* d on ud.dept_id = d.id
        left join user_role_* ur on pu.id = ur.user_id
        left join role_* r on r.id = ur.role_id
        <where>
            <if test="username !=null and username != ''">
                and pu.username like concat('%',#{username},'%')
            </if>
            <if test="tenantId !=null and tenantId != ''">
                and put.tenant_id =  #{tenantId}
            </if>
            <if  test="phone !=null and phone != ''">
                and pu.phone like concat('%',#{phone},'%')
            </if>
            <if test="deptIds != null and deptIds != ''">
                and ud.dept_id in
                <foreach collection="deptIds" item="id" open="(" close=")" separator=",">
                     #{id}
                </foreach>
            </if>
                and pu.is_del = 0
        </where>
        group by pu.id, pu.create_time
        order by pu.create_time desc
    </select>
    <select id="pageMenu" resultType="com.yitai.admin.vo.MenuVO">
        select distinct m.id, m.menu_name, m.menu_type, m.menu_path,m.icon,
                        m.menu_router, m.identify,m.visible, m.menu_pid, m.sort_no
        from public_menu m
        join role_menu_* rm on m.id = rm.menu_id
        join user_role_* ur on ur.role_id = rm.role_id
        <where>
            and ur.user_id = #{id}
            <if test="typeList !=null and typeList != ''">
                and m.menu_type in
                    <foreach collection="typeList" item="item"
                             open="(" close=")" separator=",">
                        #{item}
                    </foreach>
            </if>
            and m.is_del = 0
        </where>
    </select>

    <select id="pageAllMenu" resultType="com.yitai.admin.vo.MenuVO">
        select *
        from public_menu
        <where>
            <if test="typeList !=null and typeList != ''">
                and menu_type in
                <foreach collection="typeList" item="item"
                         open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            and is_del = 0
        </where>
    </select>

    <select id="getTenant" resultType="com.yitai.admin.entity.Tenant">
        select public_tenant.id, public_tenant.tenant_no, public_tenant.tenant_name, public_tenant.tenant_logo
        from public_user_tenant
        join public_tenant on public_tenant.id = public_user_tenant.tenant_id
        <where>
            <if test="userId !=null and userId != ''">
                and public_user_tenant.user_id = #{userId}
            </if>
                and public_tenant.is_del = 0
        </where>
    </select>
    <select id="getRole" resultType="java.lang.String">
        select r.role_name
        from role_* r
                 join user_role_* ur on r.id = ur.role_id
        where ur.user_id = #{id}
    </select>

    <select id="listAll" resultMap="pageQueryResultMap">
        select pu.id, pu.username, pu.realname, pu.sex, pu.openid, pu.phone, pu.email,
        pu.id_number, pu.status, avatar,
        GROUP_CONCAT(distinct d.department_name order by ud.dept_id) as departments,
        GROUP_CONCAT(distinct r.role_name order by r.id) as roles
        from public_user pu
        left join public_user_tenant put on pu.id = put.user_id
        left join user_department_* ud on pu.id = ud.user_id
        left join department_* d on ud.dept_id = d.id
        left join user_role_* ur on pu.id = ur.user_id
        left join role_* r on r.id = ur.role_id
        <where>
            <if test="tenantId !=null and tenantId != ''">
                and put.tenant_id =  #{tenantId}
            </if>
            and pu.is_del = 0
        </where>
        group by pu.id, pu.create_time
        order by pu.create_time desc
    </select>
    <select id="hasScopeRange" resultType="java.lang.Long">
        select distinct rd.dept_id
        from role_department_* rd
                 left join role_* r on rd.role_id = r.id
            left join user_role_* ur on ur.role_id = r.id
        where ur.user_id = #{id}
    </select>
</mapper>